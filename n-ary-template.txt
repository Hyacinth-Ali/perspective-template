Legend: h = here, o = other, "from" = .1, "to" = .2
Language Actions: C = create, U = update, D = delete

// Each perspective action is treated as a transaction
// and can be undone if need be. Example, when there is
// a constraint violation due to create, update, or update
// of a model element, all the executed steps of the perspective
// actions are reverted in order to preserve the constraint

// Mapping refers to COREModelElementMapping in the metamodel
// TypeMapping refers to CoreLanguageElementMapping

List<EObject> updatedElements = new ArrayList<EObject>();

// helper methods

private EObject getElementOther(mapping, elementHere) {
  if (mapping.getModelElements().get(0).equals(elementHere)) {
    return mapping.getModelElements().get(1);
  } else {
    return mapping.getModelElements().get(0);
  }
}

public updateElement(elementHere) {
  // language call
  U(elementHere);
  updateOthers(elementHere);
  updatedElements.clear();
}

private updateOthers(elementHere) {
  updatedElements.add(elementHere);
  if (updatedElements.size() > 1) {
    // language call
    U(elementHere);
  }
  for (Mapping mapping : getMappings(<identifier>, elementHere)) {
    elementOther = getElementOther(mapping, elementHere);
    // perspective recursive call
    if (!updatedElements.contains(elementOther)) {
      updateOthers(elementOther);
    }
  }
}
