
// create type
public createElement(p1, p2, ...) {
  element = create(p1, p2, ...);
  createElements(element, p1, p2, ...);

  // secondary effects
  for (actionEffect : secondaryEffects) {
    if (actionEffect.getParameterEffect == CONTENT) {
      for (secondaryElement : element.eContents()) {
        if (secondaryElement instanceof actionEffect.getLanguageElement().getLanguageElement()) {
          if (actionEffect.languageAction.actionType == CREATE) {
            createSecondaryElements(secondaryElement, p1, p2, ...);
          } else if(actionEffect.languageAction.actionType == UPDATE) {
            updateSecondaryElements(secondaryElement, p2, p3, ...)
          }
      }
    }
  } else {
      // getSecondaryElement is a helper method which returns the affected element
      // this can work for create and update actions.
      // Delete: To be discussed: the element in question has been deleted while it is
      // required to retrive other mapped elements.
      secondaryElement = getSecondaryElement(actionEffect);
      if (actionEffect.languageAction.actionType == CREATE) {
        createSecondaryElements(secondaryElement, p1, p2, ...);
      } else if(actionEffect.languageAction.actionType == UPDATE) {
        updateSecondaryElements(secondaryElement, p2, p3, ...)
      }
    }
  }
}
private createElements(element, p1, p2, ...) {
  for (MappingType type : getMappingTypes(element)) {
      mappings = getMappings(type, element);
      metaclasses = getOtherMetaClasses(type, element);
      otherElemets = null;
      for (EObject metaclass: metaclasses) {
        // TODO: n-ary create types
        // the create type may use binary relationships for the concerned elements
        switch(getCreateType(type)) {
          case CAN_CREATE:
            if (mappings.size() == 0 ) {
              boolean isOther = isCreateOther();
              if (isOther) {
                other = CREATE(metaclass, p1, p2, ...);
                otherElemets.add(other);
              }
            }
            break;
          case CREATE_OR_USE_NON_MAPPED:
            if (mappings.size() == 0) {
              other = findCorrespondingElement();
              if (other == null ||
                getMappings(other).size() > 0) {
                  other = CREATE(metaclass, p1, p2, ...);
                }
                otherElemets.add(other);
              }
              break;
            case . . .
          }
      }
      createMapping(type, element, otherElemets);
      for (other: otherElemets) {
        createElements(other, p1, p2, ...);
      }
      }
    }

    // delete type
    public deleteElement(element, p2, p3, ...) {
      deleteElements(element, p2, p3, ...);

      // secondary effects
      // To be discussed: the element in question has been deleted while it is
      // required to retrive other mapped elements.
    }
    private deleteElements(element, p2, p3, ...) {
      mappings = getMappings(element);
      for (Mapping mapping : mappings) {
        others = getOtherElements(mapping, element);
        otherElemets = null;
        for (EObject other: others) {
          // TODO: n-ary delete types
          // the delete type may use binary relationships for the concerned elements
          deleteType = getDeleteType(mapping);
          mappingType = mapping.getMappingType();
          switch(deleteType) {
            case JUST_DELETE:
              // do nothing, action already covered
              break;
            case DELETE_OTHERS:
              otherElemets.add(other);
              break;
            case DELETE_SINGLE_MAPPED:
              otherMappings =
              getMappings(mappingType, other);
              if (otherMappings.size() == 0) {
                otherElemets.add(other);
              }
              break;
            }
        }
        mapping.delete();
        DELETE(element, p2, p3, ...);
        for (EObject other: others) {
          deleteElements(other, p2, p3, ...);
        }
      }
    }

    // Update type
    updatedElements = new ArrayList<EObject>();
    public updateElement(element, feature, value) {
      updatedElements.clear();
      updateElements(element, feature, value);
      updatedElements.clear();

      // secondary effects
      for (actionEffect : secondaryEffects) {
        if (actionEffect.getParameterEffect == CONTENT) {
          for (secondaryElement : element.eContents()) {
            if (secondaryElement instanceof actionEffect.getLanguageElement().getLanguageElement()) {
              if (actionEffect.languageAction.actionType == CREATE) {
                createSecondaryElements(secondaryElement, p1, p2, ...);
              } else if(actionEffect.languageAction.actionType == UPDATE) {
                updateSecondaryElements(secondaryElement, p2, p3, ...)
              }
          }
        }
      } else {
          // getSecondaryElement is a helper method which returns the affected element
          // this can work for create and update actions.
          // Delete: To be discussed: the element in question has been deleted while it is
          // required to retrive other mapped elements.
          secondaryElement = getSecondaryElement(actionEffect);
          if (actionEffect.languageAction.actionType == CREATE) {
            createSecondaryElements(secondaryElement, p1, p2, ...);
          } else if(actionEffect.languageAction.actionType == UPDATE) {
            updateSecondaryElements(secondaryElement, p2, p3, ...)
          }
        }
        updatedElements.clear();
      }
    }
    private updateElements(element, feature, value) {
      UPDATE(element, feature, value);
      updatedElements.add(element);
      for (Mapping mapping : getMappings(element)) {
        MappingType mappingType = getMappingType(mapping);
        AttributeMapping attributeMappings = mappingType.getAttributeMappings;
        if (attributeMappings.isEmpty()) {
            continue;
        }

        others = getOtherElements(mapping, element);
        for (other : others) {
          other = getOther(mapping, element);
          otherMetaclass = other.eClass();
          otherCoreLE = getCoreLanguageElement(otherMetaclass);
          for (AttributeMapping attrrMapping : attributeMappings) {
            for (LanguageElementAttribute elementAttr : attrrMapping.getMappings()) {
              if (otherCoreLE.getAttributes.contains(elementAttr)) {
                otherFeature = elementAttr.getAttributeElement();
                // perspective recursive call
                if (!updatedElements.contains(other)) {
                  updateElements(other, otherFeature, value);
                }
              }
            }
          }
        }
      }
    }

    private EObject getSecondaryElement(actionEffect) {
      EObject affectedElement = null;
      // I think we just need element, instead of container and element?
      // Similarly, id, instead of container_id and element_id
      if (actionEffect.getParameterEffect() == ELEMENT) {
        affectedElement = actionEffect.getPameter();
      } else if (actionEffect.getParameterEffect() == ID) {
        affectedElement = getAffectedElement(actionEffect.getPameter())
      }
    }
