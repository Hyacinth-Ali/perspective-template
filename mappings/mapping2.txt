The from and to are strictly based on mapping end cardinality

================================================================
1. Compulsory Optional (from 1 -- 0..1 to) Template:
================================================================

if (from.getMapping == to.getMapping) {
  // the two model elements are already mapped.
} else if (from.mappings.size() == 1){
  // This is not allowed in this mapping type
  // the to mapping element must be mapped to an element
} else if (to.mappings.size() == 1) {
  deleteMapping(to.getMapping);
  map(from, to);
}  else {
  map(from, to);
}
================================================================
2. Compulsory Compulsory (from 1 -- 1 to) Template:
================================================================

Cannot create mapping of this type

================================================================
3. Compulsory Optional-Multiple (from 1 -- 0..* to) Template.
================================================================

if (from.getMapping == to.getMapping) {
  // the two model elements are already mapped.
} else if (to.mappings.size() == 1) {
  deleteMapping(to.getMapping);
  map(from, to);
}  else {
  map(from, to);
}

================================================================
4. Compulsory Compulsory-Multiple (from 1 -- 1..* to) Template:
================================================================
//TODO; Buggy, please update
if (from.getMapping == to.getMapping) {
  // the two model elements are already mapped.
} else if (to.mappings.size() == 1 && getOther(to).mappings.size
() == 1) {
  // can't create the mapping due perspective constraints
}  else if (to.mappings.size() == 1 && getOther(to).mappings.size
() > 1){
  deleteMapping(to.getMapping);
  map(from, to);
} else {
  map(from, to);
}

================================================================
5. Optional Optional (from 0..1 -- 0..1 to) Template:
================================================================
if (from.getMapping == to.getMapping) {
  // the two model elements are already mapped.
} else if ((from.getMappings.size() == 1 and to.getMappings.size() == 0) {
  deleteMapping(from.getMapping);
  map(from, to);
} else if ((from.getMappings.size() == 0 and to.getMappings.size() == 1)
|| (from.getMappings.size() == 1 and to.getMappings.size() == 1)) {
  deleteMapping(to.getMapping);
  map(from, to);
} else {
  map(from, to);
}
// NoCreate

================================================================
6. Compulsory-Multiple Optional (from 1..* -- 0..1 to) Template:
================================================================

if (from.getMapping == to.getMapping) {
  // the two model elements are already mapped.
} else if (from.getMappings.size() == 1 && getOther(from).getMappings.size() == 1){
  // can't create the mapping due perspective constraints
}else if (from.getMappings.size() == 1 && getOther(from).getMappings.size() > 1) {
  deleteMapping(from.getMapping);
  map(from, to);
} else {
  map(from, to);
}

================================================================
7. Optional-Multiple Optional (from 0..* -- 0..1 to) Template:
================================================================
if (from.getMapping == to.getMapping) {
  // the two model elements are already mapped.
} else if (from.getMappings.size() == 1) {
  deleteMapping(from.getMapping);
  map(from, to);
} else {
  map(from, to);
}
================================================================
8. Compulsory-Multiple Compulsory-Multiple (from 1..* -- 1..* to) Template:
================================================================
// TODO: updated, because of 1 -- 1 relationship
map(from, to);

================================================================
9. Optional-Multiple Optional-Multiple (from 0..* -- 0..* to) Template:
================================================================

Same as 8

================================================================
10. Optional-Multiple Compulsory-Multiple (from 0..* -- 1..* to) Template:
================================================================

Same as 8

================================================================
11. Optional Compulsory (from 0..1 -- 1 to) Template:
================================================================
Inverse of of 1

================================================================
12. Optional-Multiple Compulsory (from 0..* -- 1 to) Template:
================================================================
Inverse of of 3

================================================================
13. Compulsory-Multiple  Compulsory (from 1..* -- 1 to) Template:
================================================================
Inverse of of 4

================================================================
14. Optional Compulsory-Multiple (from 0..1 -- 1..* to) Template:
================================================================
Inverse  of 6

================================================================
15. Optional Optional-Multiple (from 0..1 -- 0..* to) Template:
================================================================
Inverse of of 7

================================================================
16. Compulsory-Multiple Optional-Multiple (from 1..* -- 0..* to) Template:
================================================================
Inverse of of 10
