Legend: h = here, o = other, "from" = .1, "to" = .2
Language Actions: C = create, U = update, D = delete

// Each perspective action is treated as a transaction
// and can be undone if need be. Example, when there is
// a constraint violation due to create, update, or update
// of a model element, all the executed steps of the perspective
// actions are reverted in order to preserve the constraint

// Mapping refers to COREModelElementMapping in the metamodel
// TypeMapping refers to CoreLanguageElementMapping

// helper methods

private void createMapping(type, elementHere, elementOther) {
    mapping = C(ModelElementMapping);
    mapping.getModelElements().add(elementHere);
    mapping.getModelElements().add(elementOther);
    mapping.setType(type);
}

private EObject getElementOther(mapping, elementHere) {
  if (mapping.getModelElements().get(0).equals(elementHere)) {
      return mapping.getModelElements().get(1);
  } else {
      return mapping.getModelElements().get(0);
  }
}

private TypeMapping getMapType(identifier) {
  for (TypeMapping mapType : perspective.getMappings()) {
    if (mapType.getIdentifier().equals(identifier)) {
      return type;
    }
  }
  return null;
}

private List<Mapping> getMappings(identifier, modelElement) {
  List<Mapping> modelMappings = new ArrayList<Mapping>();
  TypeMapping mapType = getMapType(identifier);
  for (Mapping map : mapType.getInstances()) {
    if (map.getModelElements().get(0) == modelElement || map.getModelElements().get(1) == modelElement) {
        modelMappings.add(map);
    }
  }
  return modelMappings;
}

private void createOtherElementAndMapping(elementHere) {
  elementOther = C(o);
  mapType = getMapType(<identifier>);
  createMapping(mapType, elementHere, elementOther)
}

// create one mapping only if other element is not mapped otherwise create
// other element and mapping
private void createFirstMappingOrElementAndMapping(elementHere) {
  // Check if a corresponding element exist, either mapped or not
  elementOther = findCorrespondingElement();
  if (elementOther == null || getMappings(<identifier>, elementOther).isEmpty() = false) {
      elementOther = C(o);
  }
  mapType = getMapType(<identifier>);
  createMapping(mapType, elementHere, elementOther)
}

// create other element and mapping multiple times
// @param numberOfMappings number of mappings to create
private void createOtherElementsAndMappings(elementHere, numberOfMappings) {
  for (int count = 0; count < numberOfMappings; count++) {
    elementOther = C(o);
    mapType = getMapType(<identifier>);
    createMapping(mapType, elementHere, elementOther);
  }
}

// create one mapping, whether other element is mapped or not, otherwise create
// other element and mapping
private void createMappingOrElementAndMapping(elementHere) {
  elementOther = findCorrespondingElement();
  if (elementOther == null) {
      elementOther = C(o);
  }
  mapType = getMapType(<identifier>);
  createMapping(mapType, elementHere, elementOther)
}

// create many mappings only if each corresponding other element is not mapped
// and potentially create other elements and mappings
// @param numberOfMappings the number of mappings to create
private void createFirstMappingsAndElementsAndMappings(elementHere, numberOfMappings) {
  // Find corresponding elements, either mapped or not
  List<EObject> otherElements = findCorrespondingElements();
  // create mapping for each corresponding element which is not mapped
  for (EObject element : otherElements) {
      if (numberOfMappings <= 0) {
        break;
      } else {
        if (getMappings(<identifier>, element).size() == 0) {
            elementOther = element;
            mapType = getMapType(<identifier>);
            createMapping(mapType, elementHere, elementOther);
            numberOfMappings--;
        }
      }
  }
  for (int count = 0; count < numberOfMappings; count++ ) {
    elementOther = C(o);
    mapType = getMapType(<identifier>);
    createMapping(mapType, elementHere, elementOther);
  }
}

// create many mappings, each with corresponding other element,
// and potentially create other elements and mappings
// @param numberOfMappings the number of mappings to create
private void createMappingsAndElementsAndMappings(elementHere, numberOfMappings) {
  // Find corresponding elements, either mapped or not
  List<EObject> otherElements = findCorrespondingElements();
  // create mapping for each corresponding element which is not mapped
  for (EObject element : otherElements) {
    if (numberOfMappings <= 0) {
      break;
    } else {
      elementOther = element;
      mapType = getMapType(<identifier>);
      createMapping(mapType, elementHere, elementOther);
      numberOfMappings--;
    }
  }
  for (int count = 0; count < numberOfMappings; count++ ) {
    elementOther = C(o);
    mapType = getMapType(<identifier>);
    createMapping(mapType, elementHere, elementOther);
  }
}

// generic update - applies to all cases 1 to 10
U: updateElement(elementHere) {
    U(elementHere);
    for (Mapping mapping : getMappings(<identifier>, elementHere)) {
      elementOther = getElementOther(mapping, elementHere);
      U(elementOther);
    }
}

================================================================
1. Compulsory Optional (from 1 -- 0..1 to) Template:
================================================================

C1.1: createNewElement() {
    // Ask user whether to create a mapping
    boolean map = askZeroOrOne();
    elementHere = C(h);
    if (map) {
      createOtherElementAndMapping(elementHere);
    }
}

C1.2: createNewElement() {
    elementHere = C(h);
    createFirstMappingOrElementAndMapping(elementHere);
}

D1.1: deleteElement(elementHere) {
    List<Mapping> mappings = getMappings(<identifier>, elementHere);
    for (Mapping mapping : mappings) {
        elementOther = getElementOther(mapping, elementHere);
        D(elementOther)
    }
    D(mappings);
    D(elementHere);
}

D1.2: deleteElement(elementHere) {
    D(getMappings(<identifier>, elementHere))
    D(elementHere)
}

================================================================
2. Compulsory Compulsory (from 1 -- 1 to) Template:
================================================================

C2.1: createNewElement() {
    elementHere = C(h);
    createOtherElementAndMapping(elementHere);
}

C2.2 same as C2.1

D2.1 same as D1.1

D2.2 same as D1.1

================================================================
3. Compulsory Optional-Multiple (from 1 -- 0..* to) Template.
================================================================

C3.1: createNewElement() {
    // Ask user how many mappings to create
    int numberOfMappings = askMany();
    elementHere = C(h);
    createOtherElementsAndMappings(elementHere, numberOfMappings);
}

C3.2: createNewElement() {
    elementHere = C(h);
    createMappingOrElementAndMapping(elementHere);
}

D3.1 same as D1.1

D3.2 same as D1.2

================================================================
4. Compulsory Compulsory-Multiple (from 1 -- 1..* to) Template:
================================================================

C4.1: createNewElement() {
    // Ask user how many mappings to create (at least one)
    int numberOfMappings = askAtLeastOne();
    elementHere = C(h);
    createOtherElementsAndMappings(elementHere, numberOfMappings);
}

C4.2 same as C3.2

D4.1 same as D1.1

D4.2: deleteElement(elementHere) {
    elementHereMappings = getMappings(<identifier>, elementHere);
    for (Mapping mapping : elementHereMappings) {
        elementOther = getElementOther(mapping, elementHere);
        elementOtherMappings = getMappings(<identifier>, elementOther);
        if (elementOtherMappings.size() == 1) {
            D(elementOther)
        }
    }
    D(elementHereMappings)
    D(elementHere)
}

================================================================
5. Optional Optional (from 0..1 -- 0..1 to) Template:
================================================================

C5.1: createNewElement() {
    // Ask user whether to create a mapping
    boolean map = askZeroOrOne();
    elementHere = C(h);
    if (map) {
      createFirstMappingOrElementAndMapping(elementHere);
    }
}

C5.2 same as C5.1

D5.1 same as D1.2

D5.2 same as D1.2

================================================================
6. Compulsory-Multiple Optional (from 1..* -- 0..1 to) Template:
================================================================

C6.1: createNewElement() {
    // Ask user whether to create a mapping
    boolean map = askZeroOrOne();
    elementHere = C(h);
    createMappingOrElementAndMapping(elementHere);
}

C6.2: createNewElement() {
    // Ask user how many mappings to create (at least one)
    int numberOfMappings = askAtLeastOne();
    elementHere = C(h);
    createFirstMappingsAndElementsAndMappings(elementHere, numberOfMappings);
}

D6.1 same as D4.2

D6.2 same as D1.2

================================================================
7. Optional-Multiple Optional (from 0..* -- 0..1 to) Template:
================================================================

C7.1 same as C6.1

C7.2: createNewElement() {
    // Ask user how many mappings to create
    int numberOfMappings = askMany();
    elementHere = C(h);
    createFirstMappingsAndElementsAndMappings(elementHere, numberOfMappings);
}

D7.1 same as D1.2

D7.2 same as D1.2

================================================================
8. Compulsory-Multiple Compulsory-Multiple (from 1..* -- 1..* to) Template:
================================================================

C8.1: createNewElement() {
    // Ask user how many mappings to create (at least one)
    int numberOfMappings = askAtLeastOne();
    elementHere = C(h);
    createMappingsAndElementsAndMappings(elementHere, numberOfMappings);
}

C8.2 same as C8.1

D8.1 same as D4.2

D8.2 same as D4.2

================================================================
9. Optional-Multiple Optional-Multiple (from 0..* -- 0..* to) Template:
================================================================

C9.1: createNewElement() {
    // Ask user how many mappings to create
    int numberOfMappings = askMany();
    elementHere = C(h);
    createMappingsAndElementsAndMappings(elementHere, numberOfMappings);
}

C9.2 same as C9.1

D9.1 same as D1.2

D9.2 same as D1.2

================================================================
10. Optional-Multiple Compulsory-Multiple (from 0..* -- 1..* to) Template:
================================================================

C10.1 same as C8.1

C10.2 same as C9.1

D10.1 same as D1.2

D10.2 same as D4.2
