
Compulsory Optional (from 1 -- 0..1 to) Template.
legends: h = here, o = other, Language Actions: C = create, U = Update, D = delete

"from" language (from 1 -- 0..1 to):
createNewElement() {
  elementHere = C(h);
  // Ask user either to create a mapping
  boolean map = isCreateMapping();
  if (map) {
    elementOther = C(o);
    mapping = C(map(elementHere, elementOther));
    elementOther.add(mapping);
    elementHere.add(mapping);
  }
}

"to" language (from 1 -- 0..1 to):
createNewElement() {
  elementHere = C(h);
  // Check if a corresponding element exist
  boolean otherElementExist = isCorrespondingElement(o);
  if (otherElementExist) {
    mapping = C(map(elementHere, elementOther));
    elementOther.add(mapping);
    elementHere.add(mapping);
  } else {
    elementOther = C(o);
    C(map(elementHere, elementOther));
    elementOther.add(mapping);
    elementHere.add(mapping);
}
}
  
  "from" language (from 1 -- 0..1 to):
  updateElement(elementHere) {
    U(elementHere);
    for (Mapping map : elementHere.getMappings) {
      boolean elementHereIsTo = map.getTo.equals(elementHere);
      if (elementHereIsTo) {
        elementOther = map.getFrom;
        // this update strictly depends on the relationship attribute of the Element Mapping
        U(elementOther);
      } else {
        elementOther = map.getTo;
        U(elementOther);
      }
    }  
  }
 // The same as above
  "to" language (from 1 -- 0..1 to):
  updateElement(elementHere) {
    U(elementHere);
    elementOther = elementHere.map.elementOther;
    U(elementOther)
  }
  
  "from" language (from 1 -- 0..1 to):
  deleteElement(elementHere) {
    // Check if the element is mapped
    boolean mapped = isMapped(elementHere);
    if (mapped) {
      elementOther = elementHere.map.elementOther;
      Delete(map)
      D(elementHere)
      D(elementOther)
    } else {
      D(elementHere)
  }
  }
  
  "to" language (from 1 -- 0..1 to):
  deleteElement(elementHere) {
    D(elementHere.amp)
    D(elementHere)
  }
    
  
