Legends: h = here, o = other, Language Actions: C = create, U = Update, D = delete

 ================================================================
  Compulsory Optional (from 1 -- 0..1 to) Template:
 ================================================================
"from" language (from 1 -- 0..1 to):
C1.1: createNewElement() {
  elementHere = C(h);
  // Ask user either to create a mapping
  boolean map = isCreateMapping();
  if (map) {
    elementOther = C(o);
    mapping = C(map(elementHere, elementOther));
    elementOther.add(mapping);
    elementHere.add(mapping);
  }
}

"to" language (from 1 -- 0..1 to):
C1.2: createNewElement() {
  elementHere = C(h);
  // Check if a corresponding element exist
  boolean otherElementExist = isCorrespondingElement(o);
  if (otherElementExist) {
    mapping = C(map(elementHere, elementOther));
    elementOther.add(mapping);
    elementHere.add(mapping);
  } else {
    elementOther = C(o);
    C(map(elementHere, elementOther));
    elementOther.add(mapping);
    elementHere.add(mapping);
}
}
  
  //generic update
  "from" language (from 1 -- 0..1 to):
 U1.1: updateElement(elementHere) {
    U(elementHere);
    for (Mapping map : elementHere.getMappings) {
      boolean elementHereIsTo = map.getTo.equals(elementHere);
      if (elementHereIsTo) {
        elementOther = map.getFrom;
        // this update strictly depends on the relationship 
        // attribute of the Element Mapping
        U(elementOther);
      } else {
        elementOther = map.getTo;
        U(elementOther);
      }
    }  
  }
 // The same as U1.1
  "to" language (from 1 -- 0..1 to):
  updateElement(elementHere) {
  }
  
  "from" language (from 1 -- 0..1 to):
 D1.1 deleteElement(elementHere) {
    List<Mapping> maps = elementHere.getMappings();
    for (Mapping map : maps) {
      elementOther = map.getElementOther;
      D(elementOther)
    }
    Delete(maps);
    D(elementHere)
  }
  
  "to" language (from 1 -- 0..1 to):
D1.2  deleteElement(elementHere) {
    D(elementHere.getMaping)
    D(elementHere)
  }
  
  
  ================================================================
  Compulsory Compulsory (from 1 -- 1 to) Template:
  ================================================================
  "from" language (from 1 -- 1 to):
C2.1:  createNewElement() {
  elementHere = C(h);
  elementOther = C(o);
  mapping = C(map(elementHere, elementOther));
  elementOther.add(mapping);
  elementHere.add(mapping);
}

// Same as C2.1
"to" language (from 1 -- 1 to):
createNewElement() {
}
  // The same as U1.1
  "from" language (from 1 -- 0..1 to):
  updateElement(elementHere) {  
  }
 // The same as U1.1
  "to" language (from 1 -- 0..1 to):
  updateElement(elementHere) {
  }
  
  "from" language (from 1 -- 0..1 to):
 D2.1: deleteElement(elementHere) {
      elementOther = elementHere.map.elementOther;
      Delete(map)
      D(elementHere)
      D(elementOther)
  }
  
  //same as above D2.1
  "to" language (from 1 -- 0..1 to):
  deleteElement(elementHere) {

  }
  
   ================================================================
   Compulsory Optional-Multiple (from 1 -- 0..* to) Template.
   ================================================================
   "from" language (from 1 -- 0..* to):
 C3.1: createNewElement() {
    elementHere = C(h);
    // Ask user either to create a mapping
    boolean map = isCreateMapping();
    while(map) {
      elementOther = C(o);
      mapping = C(map(elementHere, elementOther));
      elementOther.add(mapping);
      elementHere.add(mapping);
      map = isCreateMapping();
    }
  }
  
  // the same as c2.1
  "to" language (from 1 -- 0..* to):
  createNewElement() {
    
  }
  
   // The same as U1.1
  "from" language (from 1 -- 0..* to):
  updateElement(elementHere) {  
  }
 // The same as U1.1
  "to" language (from 1 -- 0..* to):
  updateElement(elementHere) {
  }
  
  // Same as D1.1
  "from" language (from 1 -- 0..* to):
 D3.1 deleteElement(elementHere) {
 }
 
 // Same as D1.2
  "from" language (from 1 -- 0..* to):
 D3.1 deleteElement(elementHere) {
 }
 
 ================================================================
 Compulsory Compulsory-Multiple (from 1 -- 1..* to) Template:
 ================================================================
"from" language (from 1 -- 1..* to):
C4.1:  createNewElement() {
  elementHere = C(h);
  elementOther = C(o);
  mapping = C(map(elementHere, elementOther));
  elementOther.add(mapping);
  elementHere.add(mapping);
   // Ask user either to create another mapping
    boolean map = isCreateMapping();
    while(map) {
      elementOther = C(o);
      mapping = C(map(elementHere, elementOther));
      elementOther.add(mapping);
      elementHere.add(mapping);
      map = isCreateMapping();
    }
}

// Same as C1.2
"from" language (from 1 -- 1..* to):
C4.1:  createNewElement() {

}

// Same as D1.1
  "from" language (from 1 -- 0..* to):
 D4.1 deleteElement(elementHere) {
 }
 
 // Same as D1.2
  "from" language (from 1 -- 0..* to):
 D4.1 deleteElement(elementHere) {
 }
