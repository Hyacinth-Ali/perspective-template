
perspective PerspectiveTest {
    default A_Model;
     
    display name "Template Test";
            
    languages {
    	existing language AModel {
            rootPackage "ca.mcgill.sel.amodel";
            packageClassName AmodelPackage;
            controllerPackage "ca.mcgill.sel.amodel.controller";
            roleName A_Model;
            utilPackage : "ca.mcgill.sel.perspective.test";
            otherRootPackage "ca.mcgill.sel.bmodel";
        }  
              
        existing language BModel {
            rootPackage "ca.mcgill.sel.bmodel";
            packageClassName BmodelPackage;
            controllerPackage "ca.mcgill.sel.bmodel.controller";
            roleName B_Model;
            utilPackage : "ca.mcgill.sel.perspective.test";
            otherRootPackage "ca.mcgill.sel.amodel";
        }
          
    }      
           
    actions {
    	
    	// A model language actions
    	redefined create action createNewA1 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA1((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A1;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA1()";
    		secondaryEffects {
    			languageElement : "AmodelPackage.eINSTANCE.getA2()";
    			languageElement : "AmodelPackage.eINSTANCE.getA3()";
    			languageElement : "AmodelPackage.eINSTANCE.getA4()";
    		}
    	}
    	 
    	redefined create action createNewA2 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA2((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A2;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA2()";
    	}
    	 
    	redefined create action createNewA3 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA3((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A3;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA3()";
    	}
    	
    	redefined create action createNewA4 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA4((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A4;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA4()";
    	}
    	
    	redefined create action createNewA5 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA5((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A5;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA5()";
    	}
    	
    	redefined create action createNewA6 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA6((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A6;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA6()";
    	}
    	
    	redefined create action createNewA7 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA7((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A7;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA7()";
    	}
    	
    	redefined create action createNewA8 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA8((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A8;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA8()";
    	}
    	
    	redefined create action createNewA9 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA9((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A9;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA9()";
    	}
    	
    	redefined create action createNewA10 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA10((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A10;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA10()";
    	}
    	
    	redefined create action createNewA11 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA11((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A11;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA11()";
    	}
    	  
    	redefined create action createNewA12 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "AModelController.getInstance().createA12((AModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : A12;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA12()";
    	}
    	
    	redefined delete action deleteA1 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA1((A1) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A1;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA1()";
    		secondaryEffects {
    			element : "AModelController.getInstance().getA4()";
    		}
    	} 
    	
    	redefined delete action deleteA2 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA2((A2) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A2;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA2()";
    	}  
    	
    	redefined delete action deleteA3 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA3((A3) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A3;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA3()";
    	}  
    	
    	redefined delete action deleteA4 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA4((A4) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A4;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA4()";
    	}  
    	
    	redefined delete action deleteA5 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA5((A5) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A5;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA5()";
    	}  
    	
    	redefined delete action deleteA6 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA6((A6) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A6;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA6()";
    	}  
    	
    	redefined delete action deleteA7 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA7((A7) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A7;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA7()";
    	}  
    	
    	redefined delete action deleteA8 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA8((A8) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A8;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA8()";
    	}  
    	
    	redefined delete action deleteA9 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA9((A9) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A9;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA9()";
    	}  
    	
    	redefined delete action deleteA10 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA10((A10) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A10;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA10()";
    	}  
    	
    	redefined delete action deleteA11 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA11((A11) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A11;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA11()";
    	}  
    	
    	redefined delete action deleteA12 {
    		roleName : A_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "AModelController.getInstance().removeA12((A12) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : A12;
    		metaclassObject : "AmodelPackage.eINSTANCE.getA12()";
    	} 
    	 
    	// B model language actions
    	redefined create action createNewB1 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB1((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B1;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB1()";
    	}
    	
    	redefined create action createNewB2 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB2((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B2;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB2()";
    	}
    	
    	redefined create action createNewB3 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB3((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B3;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB3()";
    	}
    	
    	redefined create action createNewB4 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB4((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B4;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB4()";
    	}
    	
    	redefined create action createNewB5 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB5((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B5;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB5()";
    	}
    	
    	redefined create action createNewB6 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB6((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B6;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB6()";
    	}
    	
    	redefined create action createNewB7 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB7((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B7;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB7()";
    	}
    	
    	redefined create action createNewB8 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB8((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B8;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB8()";
    	}
    	
    	redefined create action createNewB9 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB9((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B9;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB9()";
    	}
    	
    	redefined create action createNewB10 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB10((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B10;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB10()";
    	}
    	
    	redefined create action createNewB11 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB11((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B11;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB11()";
    	}
    	
    	redefined create action createNewB12 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject owner, String name";
    		methodCall :  "BModelController.getInstance().createB12((BModel) owner, name)";
    		methodParameters : "name";
    		metaclassName : B12;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB12()";
    	}
    	
    	redefined delete action deleteB4 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "BModelController.getInstance().removeB4((B4) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : B4;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB4()";
    	}
    	 
    	redefined delete action deleteB11 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "BModelController.getInstance().removeB11((B11) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : B11;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB11()";
    	}   
    	
    	redefined delete action deleteB12 {
    		roleName : B_Model;
    		methodTypeAndParameters : "EObject currentElement";
    		methodCall :  "BModelController.getInstance().removeB12((B12) currentElement)";
    		methodParameters : "currentElement";
    		metaclassName : B12;
    		metaclassObject : "BmodelPackage.eINSTANCE.getB12()";
    	}       
    } 
    
    facade actions {
    	facadeAction create createOtherElementsForA1 {
    		roleName : A_Model;
    		metaclassName : A1;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB1()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB1(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA2 {
    		roleName : A_Model;
    		metaclassName : A2;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB2()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB2(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA4 {
    		roleName : A_Model;
    		metaclassName : A4;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB4()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB4(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA3 {
    		roleName : A_Model;
    		metaclassName : A3;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB3()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB3(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA5 {
    		roleName : A_Model;
    		metaclassName : A5;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB5()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB5(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA6 {
    		roleName : A_Model;
    		metaclassName : A6;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB6()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB6(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA7 {
    		roleName : A_Model;
    		metaclassName : A7;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB7()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB7(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA8 {
    		roleName : A_Model;
    		metaclassName : A8;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB8()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB8(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA9 {
    		roleName : A_Model;
    		metaclassName : A9;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB9()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB9(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA10 {
    		roleName : A_Model;
    		metaclassName : A10;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB10()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB10(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForA11 {
    		roleName : A_Model;
    		metaclassName : A11;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB11()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB11(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		}  
    	}
    	
    	facadeAction create createOtherElementsForA12 {
    		roleName : A_Model;
    		metaclassName : A12;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "BmodelPackage.eINSTANCE.getB12()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "BModel otherOwner = (BModel) o";
				methodCall : "RedefinedBModelAction.createNewB12(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    facadeAction delete deleteModelElement {
    		roleName : A_Model;
    		elementName : otherElement;
    		method calls { 
    			metaclassName : A1;
    			methodCall : "AModelController.getInstance().removeA1((A1) otherElement)";
    			
    			metaclassName : A2;
    			methodCall : "AModelController.getInstance().removeA2((A2) otherElement)";
    			
    			metaclassName : A3;
    			methodCall : "AModelController.getInstance().removeA3((A3) otherElement)";
    			
    			metaclassName : A4;
    			methodCall : "AModelController.getInstance().removeA4((A4) otherElement)";
    			
    			metaclassName : A5;
    			methodCall : "AModelController.getInstance().removeA5((A5) otherElement)";
    			
    			metaclassName : A6;
    			methodCall : "AModelController.getInstance().removeA6((A6) otherElement)";
    			
    			metaclassName : A7;
    			methodCall : "AModelController.getInstance().removeA7((A7) otherElement)";
    			
    			metaclassName : A8;
    			methodCall : "AModelController.getInstance().removeA8((A8) otherElement)";
    			
    			metaclassName : A9;
    			methodCall : "AModelController.getInstance().removeA9((A9) otherElement)";
    			
    			metaclassName : A10;
    			methodCall : "AModelController.getInstance().removeA10((A10) otherElement)";
    			
    			metaclassName : A11;
    			methodCall : "AModelController.getInstance().removeA11((A11) otherElement)";
    			
    			metaclassName : A12;
    			methodCall : "AModelController.getInstance().removeA12((A12) otherElement)";
    			
    			metaclassName : B1;
    			methodCall : "BModelController.getInstance().removeB1((B1) otherElement)";
    			
    			metaclassName : B2;
    			methodCall : "BModelController.getInstance().removeB2((B2) otherElement)";
    			
    			metaclassName : B3;
    			methodCall : "BModelController.getInstance().removeB3((B3) otherElement)";
    			
    			metaclassName : B4;
    			methodCall : "BModelController.getInstance().removeB4((B4) otherElement)";
    			
    			metaclassName : B5;
    			methodCall : "BModelController.getInstance().removeB5((B5) otherElement)";
    			
    			metaclassName : B6;
    			methodCall : "BModelController.getInstance().removeB6((B6) otherElement)";
    			
    			metaclassName : B7;
    			methodCall : "BModelController.getInstance().removeB7((B7) otherElement)";
    			
    			metaclassName : B8;
    			methodCall : "BModelController.getInstance().removeB8((B8) otherElement)";
    			
    			metaclassName : B9;
    			methodCall : "BModelController.getInstance().removeB9((B9) otherElement)";
    			
    			metaclassName : B10;
    			methodCall : "BModelController.getInstance().removeB10((B10) otherElement)";
    			
    			metaclassName : B11;
    			methodCall : "BModelController.getInstance().removeB11((B11) otherElement)";
    			
    			metaclassName : B12;
    			methodCall : "BModelController.getInstance().removeB12((B12) otherElement)";
    		}
    	}
    	
    	// B Model facade actions
    	facadeAction create createOtherElementsForB1 {
    		roleName : B_Model;
    		metaclassName : B1;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA1()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA1(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB2 {
    		roleName : B_Model;
    		metaclassName : B2;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA2()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA2(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB3 {
    		roleName : B_Model;
    		metaclassName : B3;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA3()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA3(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB4 {
    		roleName : B_Model;
    		metaclassName : B4;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA4()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA4(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB5 {
    		roleName : B_Model;
    		metaclassName : B5;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA5()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA5(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB6 {
    		roleName : B_Model;
    		metaclassName : B6;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA6()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA6(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB7 {
    		roleName : B_Model;
    		metaclassName : B7;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA7()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA7(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB8 {
    		roleName : B_Model;
    		metaclassName : B8;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA8()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA8(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB9 {
    		roleName : B_Model;
    		metaclassName : B9;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA9()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA9(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB10 {
    		roleName : B_Model;
    		metaclassName : B10;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA10()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA10(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    	facadeAction create createOtherElementsForB11 {
    		roleName : B_Model;
    		metaclassName : B11;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA11()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA11(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		}  
    	}
    	
    	facadeAction create createOtherElementsForB12 {
    		roleName : B_Model;
    		metaclassName : B12;
    		methodTypeAndParameters : "EObject owner, String name";
    		facade calls {
    			// first call
    			metaclassObject : "AmodelPackage.eINSTANCE.getA12()";
    	 		mapping "EObject o = getOwner(perspective, scene, owner, otherRoleName)";
				mapping "AModel otherOwner = (AModel) o";
				methodCall : "RedefinedAModelAction.createNewA12(perspective, scene, otherRoleName, 
					true, otherOwner, name)";
					
    		} 
    	}
    	
    facadeAction delete deleteModelElement {
    		roleName : B_Model;
    		elementName : otherElement;
    		method calls { 
    			metaclassName : A1;
    			methodCall : "AModelController.getInstance().removeA1((A1) otherElement)";
    			
    			metaclassName : A2;
    			methodCall : "AModelController.getInstance().removeA2((A2) otherElement)";
    			
    			metaclassName : A3;
    			methodCall : "AModelController.getInstance().removeA3((A3) otherElement)";
    			
    			metaclassName : A4;
    			methodCall : "AModelController.getInstance().removeA4((A4) otherElement)";
    			
    			metaclassName : A5;
    			methodCall : "AModelController.getInstance().removeA5((A5) otherElement)";
    			
    			metaclassName : A6;
    			methodCall : "AModelController.getInstance().removeA6((A6) otherElement)";
    			
    			metaclassName : A7;
    			methodCall : "AModelController.getInstance().removeA7((A7) otherElement)";
    			
    			metaclassName : A8;
    			methodCall : "AModelController.getInstance().removeA8((A8) otherElement)";
    			
    			metaclassName : A9;
    			methodCall : "AModelController.getInstance().removeA9((A9) otherElement)";
    			
    			metaclassName : A10;
    			methodCall : "AModelController.getInstance().removeA10((A10) otherElement)";
    			
    			metaclassName : A11;
    			methodCall : "AModelController.getInstance().removeA11((A11) otherElement)";
    			
    			metaclassName : A12;
    			methodCall : "AModelController.getInstance().removeA12((A12) otherElement)";
    			
    			metaclassName : B1;
    			methodCall : "BModelController.getInstance().removeB1((B1) otherElement)";
    			
    			metaclassName : B2;
    			methodCall : "BModelController.getInstance().removeB2((B2) otherElement)";
    			
    			metaclassName : B3;
    			methodCall : "BModelController.getInstance().removeB3((B3) otherElement)";
    			
    			metaclassName : B4;
    			methodCall : "BModelController.getInstance().removeB4((B4) otherElement)";
    			
    			metaclassName : B5;
    			methodCall : "BModelController.getInstance().removeB5((B5) otherElement)";
    			
    			metaclassName : B6;
    			methodCall : "BModelController.getInstance().removeB6((B6) otherElement)";
    			
    			metaclassName : B7;
    			methodCall : "BModelController.getInstance().removeB7((B7) otherElement)";
    			
    			metaclassName : B8;
    			methodCall : "BModelController.getInstance().removeB8((B8) otherElement)";
    			
    			metaclassName : B9;
    			methodCall : "BModelController.getInstance().removeB9((B9) otherElement)";
    			
    			metaclassName : B10;
    			methodCall : "BModelController.getInstance().removeB10((B10) otherElement)";
    			
    			metaclassName : B11;
    			methodCall : "BModelController.getInstance().removeB11((B11) otherElement)";
    			
    			metaclassName : B12;
    			methodCall : "BModelController.getInstance().removeB12((B12) otherElement)";
    		}
    	}
    	
    	
    } 
      
       // mappings
       // root model element mapping
    mappings {
    	// language element mappings for root model element
    	 mapping AModel_BModel {
            fromCardinality : 1;
            toCardinality : 1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getAModel()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getBModel()";
    
        } 
         
         // CAN_CREATE - C1
        mapping A1_B1 {
            fromCardinality : 1;
            toCardinality : 0..1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA1()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB1()";
            
            nested mappings {
            	nested mapping A1Name_B1Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        } 
        
                 // CREATE - C2
        mapping A2_B2 {
            fromCardinality : 1;
            toCardinality : 1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA2()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB2()";
            
            nested mappings {
            	nested mapping A2Name_B2Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        } 
        
          // CAN_CREATE_MANY - C3
        mapping A3_B3 {
            fromCardinality : 1;
            toCardinality : 0..*;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA3()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB3()";
            
            nested mappings {
            	nested mapping A3Name_B3Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
          // CREATE_AT_LEAST_ONE - C4
        mapping A4_B4 {
            fromCardinality : 1;
            toCardinality : 1..*;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA4()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB4()";
            
            nested mappings {
            	nested mapping A4Name_B4Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
          // CAN_CREATE_OR_USE - C5
        mapping A5_B5 {
            fromCardinality : 0..*;
            toCardinality : 0..1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA5()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB5()";
            
            nested mappings {
            	nested mapping A5Name_B5Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
          // CREATE_OR_USE - C6 
        mapping A6_B6 {
            fromCardinality : 0..*;
            toCardinality : 1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA6()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB6()";
            
            nested mappings {
            	nested mapping A6Name_B6Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
          // CAN_CREATE_OR_USE_MANY - C7
        mapping A7_B7 {
            fromCardinality : 0..*;
            toCardinality : 0..*;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA7()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB7()";
            
            nested mappings {
            	nested mapping A7Name_B7Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
          // CREATE_OR_USE_AT_LEAST_ONE - C8
        mapping A8_B8 {
            fromCardinality : 0..*;
            toCardinality : 1..*;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA8()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB8()";
            
            nested mappings {
            	nested mapping A8Name_B8Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
         // CAN_CREATE_OR_USE_NON_MAPPED - C9
        mapping A9_B9 {
            fromCardinality : 0..1;
            toCardinality : 0..1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA9()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB9()";
            
            nested mappings {
            	nested mapping A9Name_B9Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
            // CREATE_OR_USE_NON_MAPPED - C10
        mapping A10_B10 {
            fromCardinality : 0..1;
            toCardinality : 1;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA10()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB10()";
            
            nested mappings {
            	nested mapping A10Name_B10Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
         // CAN_CREATE_OR_USE_NON_MAPPED_MANY - C11
        mapping A11_B11 {
            fromCardinality : 0..1;
            toCardinality : 0..*;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA11()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB11()";
            
            nested mappings {
            	nested mapping A11Name_B11Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
         // CREATE_OR_USE_NON_MAPPED_AT_LEAST_ONE - C12
        mapping A12_B12 {
            fromCardinality : 0..1;
            toCardinality : 1..*;
            fromElement : AModel from A_Model fromGetElement "AmodelPackage.eINSTANCE.getA12()";
            toELement : BModel from B_Model toGetElement "BmodelPackage.eINSTANCE.getB12()";
            
            nested mappings {
            	nested mapping A12Name_B12Name {
            		matchMaker : true;
            		fromElement : elementName "name" from A_Model;
                    toELement : elementName "name" from B_Model;
            	}	
            }
        }
        
    }
    
    }
  
