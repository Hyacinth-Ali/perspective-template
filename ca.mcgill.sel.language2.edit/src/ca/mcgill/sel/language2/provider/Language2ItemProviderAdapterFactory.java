/**
 */
package ca.mcgill.sel.language2.provider;

import ca.mcgill.sel.language2.util.Language2AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Language2ItemProviderAdapterFactory extends Language2AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Language2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.Language2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Language2ItemProvider language2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.Language2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLanguage2Adapter() {
		if (language2ItemProvider == null) {
			language2ItemProvider = new Language2ItemProvider(this);
		}

		return language2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMA2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMA2ItemProvider lema2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMA2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMA2Adapter() {
		if (lema2ItemProvider == null) {
			lema2ItemProvider = new LEMA2ItemProvider(this);
		}

		return lema2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMB2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMB2ItemProvider lemb2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMB2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMB2Adapter() {
		if (lemb2ItemProvider == null) {
			lemb2ItemProvider = new LEMB2ItemProvider(this);
		}

		return lemb2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMC2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMC2ItemProvider lemc2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMC2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMC2Adapter() {
		if (lemc2ItemProvider == null) {
			lemc2ItemProvider = new LEMC2ItemProvider(this);
		}

		return lemc2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMD2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMD2ItemProvider lemd2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMD2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMD2Adapter() {
		if (lemd2ItemProvider == null) {
			lemd2ItemProvider = new LEMD2ItemProvider(this);
		}

		return lemd2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEME2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEME2ItemProvider leme2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEME2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEME2Adapter() {
		if (leme2ItemProvider == null) {
			leme2ItemProvider = new LEME2ItemProvider(this);
		}

		return leme2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMF2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMF2ItemProvider lemf2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMF2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMF2Adapter() {
		if (lemf2ItemProvider == null) {
			lemf2ItemProvider = new LEMF2ItemProvider(this);
		}

		return lemf2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMG2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMG2ItemProvider lemg2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMG2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMG2Adapter() {
		if (lemg2ItemProvider == null) {
			lemg2ItemProvider = new LEMG2ItemProvider(this);
		}

		return lemg2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMH2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMH2ItemProvider lemh2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMH2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMH2Adapter() {
		if (lemh2ItemProvider == null) {
			lemh2ItemProvider = new LEMH2ItemProvider(this);
		}

		return lemh2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMI2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMI2ItemProvider lemi2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMI2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMI2Adapter() {
		if (lemi2ItemProvider == null) {
			lemi2ItemProvider = new LEMI2ItemProvider(this);
		}

		return lemi2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMJ2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMJ2ItemProvider lemj2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMJ2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMJ2Adapter() {
		if (lemj2ItemProvider == null) {
			lemj2ItemProvider = new LEMJ2ItemProvider(this);
		}

		return lemj2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEMK2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMK2ItemProvider lemk2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEMK2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMK2Adapter() {
		if (lemk2ItemProvider == null) {
			lemk2ItemProvider = new LEMK2ItemProvider(this);
		}

		return lemk2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.sel.language2.LEML2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEML2ItemProvider leml2ItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.sel.language2.LEML2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEML2Adapter() {
		if (leml2ItemProvider == null) {
			leml2ItemProvider = new LEML2ItemProvider(this);
		}

		return leml2ItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (language2ItemProvider != null) language2ItemProvider.dispose();
		if (lema2ItemProvider != null) lema2ItemProvider.dispose();
		if (lemb2ItemProvider != null) lemb2ItemProvider.dispose();
		if (lemc2ItemProvider != null) lemc2ItemProvider.dispose();
		if (lemd2ItemProvider != null) lemd2ItemProvider.dispose();
		if (leme2ItemProvider != null) leme2ItemProvider.dispose();
		if (lemf2ItemProvider != null) lemf2ItemProvider.dispose();
		if (lemg2ItemProvider != null) lemg2ItemProvider.dispose();
		if (lemh2ItemProvider != null) lemh2ItemProvider.dispose();
		if (lemi2ItemProvider != null) lemi2ItemProvider.dispose();
		if (lemj2ItemProvider != null) lemj2ItemProvider.dispose();
		if (lemk2ItemProvider != null) lemk2ItemProvider.dispose();
		if (leml2ItemProvider != null) leml2ItemProvider.dispose();
	}

}
