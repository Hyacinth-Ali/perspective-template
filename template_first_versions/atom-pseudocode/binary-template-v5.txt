Legend: h = here, o = other, "from" = .1, "to" = .2
Language Actions: C = create, U = update, D = delete

// Each perspective action is treated as a transaction
// and can be undone if need be. Example, when there is
// a constraint violation due to create, update, or update
// of a model element, all the executed steps of the perspective
// actions are reverted in order to preserve the constraint

// Mapping refers to COREModelElementMapping in the metamodel

// helper methods

private void createMapping(type, elementHere, elementOther) {
    mapping = C(ModelElementMapping);
    mapping.setFrom(elementHere);
    mapping.setTo(elementOther);
    mapping.setType(type);
}

private EObject getElementOther(mapping, elementHere) {
    if (mapping.getTo().equals(elementHere)) {
        return mapping.getFrom();
    } else {
        return mapping.getTo();
    }
}


private List<Mapping> getMappings(modelElement) {
  List<Mapping> modelMappings = new ArrayList<Mapping>();
  List<Mapping> typeMappings = getModelMapType(modelElement).getInstances();
  for (Mapping map : typeMappings) {
    if (map.getTo() == modelElement) {
      modelMappings.add(map);
    } else if (map.getFrom() == modelElement) {
      modelMappings.add(map);
    }
  }
  return modelMappings;
}

// This only works with two languages
private CoreLanguageElementMapping getModelMapType(modelElement) {
  CoreLanguageElementMapping modelMapType;
  // this is already possible in TouchCORE
  perspective = getPerspective(modelElement);
  mappings = perpsective.getMappings();
  for (Mapping map : mappings) {
    EClass fromLanguageElement = map.getFrom().getLanguageElement();
    EClass toLanguageElement = map.getTo().getLanguageElement();
    if (fromLanguageElement.isInstance(modelElement)) {
      modelMapType = map;
      break;
    } else if (toLanguageElement.isInstance(modelElement)) {
      modelMapType = map;
      break;
    }
  }
  return modelMapType;
}

// getModelMapType proposal for more than two languages
HashMap<Mapping, List<COREExternalLanguage>> getModelMapTypes(modelElement) {
  HashMap<Mapping, List<COREExternalLanguage>> mapTypes;
  perspective = modelElement.getPerspective();
  mappings = perpsective.getMappings();
  for (Mapping map : mappings) {
    EClass fromLanguageElement = map.getFrom().getLanguageElement();
    EClass toLanguageElement = map.getTo().getLanguageElement();
    List<COREExternalLanguage> languages = new ArrayList<Mapping>();
    if (fromLanguageElement.isInstance(modelElement)) {
      // index 0 of languages refers to the current language
      languages.add(fromLanguageElement);
      languages.add(toLanguageElement);
      mapTypes.put(map, languages);
      break;
    } else if (toLanguageElement.isInstance(modelElement)) {
      // index 0 of languages refers to the current language
      languages.add(toLanguageElement);
      languages.add(fromLanguageElement);
      mapTypes.put(map, languages);
      break;
    }
  }
  return mapTypes;
}

// first port of COREExternalLanguage


// generic update - applies to all cases 1 to 10
U: updateElement(elementHere) {
    U(elementHere);
    for (Mapping mapping : getMappings(elementHere)) {
      elementOther = getElementOther(mapping, elementHere);
      U(elementOther);
    }
}

================================================================
1. Compulsory Optional (from 1 -- 0..1 to) Template:
================================================================

C1.1: createNewElement() {
    // Ask user whether to create a mapping
    boolean map = isCreateMapping();
    elementHere = C(h);
    if (map) {
        elementOther = C(o);
        mapType = getModelMapType(elementHere);
        createMapping(mapType, elementHere, elementOther)
    }
}

C1.2: createNewElement() {
    elementHere = C(h);
    // Check if a corresponding element exist, either mapped or not
    elementOther = findCorrespondingElement();
    // logical OR operator, second condition is not checked if first
    // condition is true
    if (elementOther == null || getMappings(elementOther).isEmpty() = false) {
        elementOther = C(o);
    }
    mapType = getModelMapType(elementHere);
    createMapping(mapType, elementHere, elementOther)
}

D1.1: deleteElement(elementHere) {
    List<Mapping> mappings = getMappings(elementHere);
    for (Mapping mapping : mappings) {
        elementOther = getElementOther(mapping, elementHere);
        D(elementOther)
    }
    D(mappings);
    D(elementHere);
}

D1.2: deleteElement(elementHere) {
    D(getMappings(elementHere))
    D(elementHere)
}

================================================================
2. Compulsory Compulsory (from 1 -- 1 to) Template:
================================================================

C2.1: createNewElement() {
    elementHere = C(h);
    elementOther = C(o);
    mapType = getModelMapType(elementHere);
    createMapping(mapType, elementHere, elementOther)
}

C2.2 same as C2.1

D2.1 same as D1.1

D2.2 same as D1.1

================================================================
3. Compulsory Optional-Multiple (from 1 -- 0..* to) Template.
================================================================

C3.1: createNewElement() {
    // Ask user how many mappings to create
    int numberOfMappings = askNumberOfMappings();
    elementHere = C(h);
    for (int count = 0; count < numberOfMappings; count++) {
        elementOther = C(o);
        mapType = getModelMapType(elementHere);
        createMapping(mapType, elementHere, elementOther);
    }
}

C3.2: createNewElement() {
    elementHere = C(h);
    // Check if a corresponding element exist, either mapped or not
    elementOther = findCorrespondingElement();
    if (elementOther == null) {
        elementOther = C(o);
    }
    mapType = getModelMapType(elementHere);
    createMapping(mapType, elementHere, elementOther)
}

D3.1 same as D1.1

D3.2 same as D1.2

================================================================
4. Compulsory Compulsory-Multiple (from 1 -- 1..* to) Template:
================================================================

C4.1: createNewElement() {
    // Ask user how many mappings to create (at least one)
    int numberOfMappings = askNumberOfMappingsAtLeastOne();
    elementHere = C(h);
    for (int count = 0; count < numberOfMappings; count++) {
        elementOther = C(o);
        mapType = getModelMapType(elementHere);
        createMapping(mapType, elementHere, elementOther)
    }
}

C4.2 same as C3.2

D4.1 same as D1.1

D4.2: deleteElement(elementHere) {
    elementHereMappings = getMappings(elementHere);
    for (Mapping mapping : elementHereMappings) {
        elementOther = getElementOther(mapping, elementHere);
        elementOtherMappings = getMappings(elementOther);
        if (elementOtherMappings.size() == 1) {
            D(elementOther)
        }
    }
    D(elementHereMappings)
    D(elementHere)
}

================================================================
5. Optional Optional (from 0..1 -- 0..1 to) Template:
================================================================

C5.1: createNewElement() {
    // Ask user whether to create a mapping
    boolean map = isCreateMapping();
    elementHere = C(h);
    if (map) {
      // Check if a corresponding element exist, either mapped or not
      elementOther = findCorrespondingElement();
      // logical OR operator, second condition is not checked if first
      // condition is true
      if (elementOther == null || getMappings(elementOther).isEmpty() = false) {
          elementOther = C(o);
      }
      mapType = getModelMapType(elementHere);
      createMapping(mapType, elementHere, elementOther)
    }
}

C5.2 same as C5.1

D5.1 same as D1.2

D5.2 same as D1.2

================================================================
6. Compulsory-Multiple Optional (from 1..* -- 0..1 to) Template:
================================================================

C6.1: createNewElement() {
    // Ask user whether to create a mapping
    boolean map = isCreateMapping();
    elementHere = C(h);
    if (map) {
        // Check if a corresponding element exist, either mapped or not
        elementOther = findCorrespondingElement();
        if (elementOther == null) {
            elementOther = C(o);
        }
        mapType = getModelMapType(elementHere);
        createMapping(mapType, elementHere, elementOther);
    }
}

C6.2: createNewElement() {
    // Ask user how many mappings to create (at least one)
    int numberOfMappings = askNumberOfMappingsAtLeastOne();
    elementHere = C(h);
    // Find corresponding elements, either mapped or not
    List<EObject> otherElements = findCorrespondingElements();
    // create mapping for each corresponding element which is not mapped
    for (EObject element : otherElements) {
        if (numberOfMappings <= 0) {
          break;
        } else {
          if (getMappings(element).size() == 0) {
              elementOther = element;
              mapType = getModelMapType(elementHere);
              createMapping(mapType, elementHere, elementOther);
              numberOfMappings--;
          }
        }
    }
    for (int count = 0; count < numberOfMappings; count++ ) {
      elementOther = C(o);
      mapType = getModelMapType(elementHere);
      createMapping(mapType, elementHere, elementOther);
    }
}

D6.1 same as D4.2

D6.2 same as D1.2

================================================================
7. Optional-Multiple Optional (from 0..* -- 0..1 to) Template:
================================================================

C7.1 same as C6.1

C7.2: createNewElement() {
    // Ask user how many mappings to create
    int numberOfMappings = askNumberOfMappings();
    elementHere = C(h);
    // Find corresponding elements, either mapped or not
    List<EObject> otherElements = findCorrespondingElements();
   // create mapping for each corresponding element which is not mapped
    for (EObject element : otherElements) {
      if (numberOfMappings <= 0) {
        break;
      } else {
        if (getMappings(element).size() == 0) {
            elementOther = element;
            mapType = getModelMapType(elementHere);
            createMapping(mapType, elementHere, elementOther);
            numberOfMappings--;
        }
      }
    }
    for (int count = 0; count < numberOfMappings; count++ ) {
      elementOther = C(o);
      mapType = getModelMapType(elementHere);
      createMapping(mapType, elementHere, elementOther);
    }
}

D7.1 same as D1.2

D7.2 same as D1.2

================================================================
8. Compulsory-Multiple Compulsory-Multiple (from 1..* -- 1..* to) Template:
================================================================

C8.1: createNewElement() {
    // Ask user how many mappings to create (at least one)
    int numberOfMappings = askNumberOfMappingsAtLeastOne();
    elementHere = C(h);
    // Find corresponding elements, either mapped or not
    List<EObject> otherElements = findCorrespondingElements();
    // create mapping for each corresponding element which is not mapped
    for (EObject element : otherElements) {
      if (numberOfMappings <= 0) {
        break;
      } else {
        elementOther = element;
        mapType = getModelMapType(elementHere);
        createMapping(mapType, elementHere, elementOther);
        numberOfMappings--;
      }
    }
    for (int count = 0; count < numberOfMappings; count++ ) {
      elementOther = C(o);
      mapType = getModelMapType(elementHere);
      createMapping(mapType, elementHere, elementOther);
    }
}

C8.2 same as C8.1

D8.1 same as D4.2

D8.2 same as D4.2

================================================================
9. Optional-Multiple Optional-Multiple (from 0..* -- 0..* to) Template:
================================================================

C9.1: createNewElement() {
    // Ask user how many mappings to create
    int numberOfMappings = askNumberOfMappings();
    elementHere = C(h);
    // Find corresponding elements, either mapped or not
    List<EObject> otherElements = findCorrespondingElements();
    // create mapping for each corresponding element which is not mapped
    for (EObject element : otherElements) {
      if (numberOfMappings <= 0) {
        break;
      } else {
        elementOther = element;
        mapType = getModelMapType(elementHere);
        createMapping(mapType, elementHere, elementOther);
        numberOfMappings--;
      }
    }
    for (int count = 0; count < numberOfMappings; count++ ) {
      elementOther = C(o);
      mapType = getModelMapType(elementHere);
      createMapping(mapType, elementHere, elementOther);
    }
}

C9.2 same as C9.1

D9.1 same as D1.2

D9.2 same as D1.2

================================================================
10. Optional-Multiple Compulsory-Multiple (from 0..* -- 1..* to) Template:
================================================================

C10.1 same as C8.1

C10.2 same as C9.1

D10.1 same as D1.2

D10.2 same as D4.2
