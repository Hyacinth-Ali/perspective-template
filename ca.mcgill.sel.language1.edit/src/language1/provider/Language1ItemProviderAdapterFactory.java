/**
 */
package language1.provider;

import java.util.ArrayList;
import java.util.Collection;

import language1.util.Language1AdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Language1ItemProviderAdapterFactory extends Language1AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Language1ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.Language1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Language1ItemProvider language1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.Language1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLanguage1Adapter() {
		if (language1ItemProvider == null) {
			language1ItemProvider = new Language1ItemProvider(this);
		}

		return language1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMA1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMA1ItemProvider lema1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMA1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMA1Adapter() {
		if (lema1ItemProvider == null) {
			lema1ItemProvider = new LEMA1ItemProvider(this);
		}

		return lema1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMB1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMB1ItemProvider lemb1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMB1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMB1Adapter() {
		if (lemb1ItemProvider == null) {
			lemb1ItemProvider = new LEMB1ItemProvider(this);
		}

		return lemb1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMC1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMC1ItemProvider lemc1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMC1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMC1Adapter() {
		if (lemc1ItemProvider == null) {
			lemc1ItemProvider = new LEMC1ItemProvider(this);
		}

		return lemc1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMD1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMD1ItemProvider lemd1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMD1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMD1Adapter() {
		if (lemd1ItemProvider == null) {
			lemd1ItemProvider = new LEMD1ItemProvider(this);
		}

		return lemd1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEME1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEME1ItemProvider leme1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEME1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEME1Adapter() {
		if (leme1ItemProvider == null) {
			leme1ItemProvider = new LEME1ItemProvider(this);
		}

		return leme1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMF1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMF1ItemProvider lemf1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMF1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMF1Adapter() {
		if (lemf1ItemProvider == null) {
			lemf1ItemProvider = new LEMF1ItemProvider(this);
		}

		return lemf1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMG1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMG1ItemProvider lemg1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMG1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMG1Adapter() {
		if (lemg1ItemProvider == null) {
			lemg1ItemProvider = new LEMG1ItemProvider(this);
		}

		return lemg1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMH1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMH1ItemProvider lemh1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMH1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMH1Adapter() {
		if (lemh1ItemProvider == null) {
			lemh1ItemProvider = new LEMH1ItemProvider(this);
		}

		return lemh1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMI1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMI1ItemProvider lemi1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMI1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMI1Adapter() {
		if (lemi1ItemProvider == null) {
			lemi1ItemProvider = new LEMI1ItemProvider(this);
		}

		return lemi1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMJ1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMJ1ItemProvider lemj1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMJ1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMJ1Adapter() {
		if (lemj1ItemProvider == null) {
			lemj1ItemProvider = new LEMJ1ItemProvider(this);
		}

		return lemj1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEMK1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEMK1ItemProvider lemk1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEMK1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEMK1Adapter() {
		if (lemk1ItemProvider == null) {
			lemk1ItemProvider = new LEMK1ItemProvider(this);
		}

		return lemk1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link language1.LEML1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEML1ItemProvider leml1ItemProvider;

	/**
	 * This creates an adapter for a {@link language1.LEML1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEML1Adapter() {
		if (leml1ItemProvider == null) {
			leml1ItemProvider = new LEML1ItemProvider(this);
		}

		return leml1ItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (language1ItemProvider != null) language1ItemProvider.dispose();
		if (lema1ItemProvider != null) lema1ItemProvider.dispose();
		if (lemb1ItemProvider != null) lemb1ItemProvider.dispose();
		if (lemc1ItemProvider != null) lemc1ItemProvider.dispose();
		if (lemd1ItemProvider != null) lemd1ItemProvider.dispose();
		if (leme1ItemProvider != null) leme1ItemProvider.dispose();
		if (lemf1ItemProvider != null) lemf1ItemProvider.dispose();
		if (lemg1ItemProvider != null) lemg1ItemProvider.dispose();
		if (lemh1ItemProvider != null) lemh1ItemProvider.dispose();
		if (lemi1ItemProvider != null) lemi1ItemProvider.dispose();
		if (lemj1ItemProvider != null) lemj1ItemProvider.dispose();
		if (lemk1ItemProvider != null) lemk1ItemProvider.dispose();
		if (leml1ItemProvider != null) leml1ItemProvider.dispose();
	}

}
